import Head from 'next/head';

type Params = { [key: string]: string };

type Article = {
  canonicalurl: string;
  displaytitle: string;
  extract: string;
  thumbnail?: { source: string };
};

async function getRandomArticleIds(): Promise<number[]> {
  const randomQueryParams: Params = {
    action: 'query',
    format: 'json',
    list: 'random',
    rnnamespace: '0',
    rnlimit: '10',
  };
  const params = new URLSearchParams(randomQueryParams).toString();
  const url = 'https://en.wikipedia.org/w/api.php?origin=*&' + params;
  const randomData = await fetch(url).then((res) => res.json());

  return randomData.query.random.map((article: { id: number }) => article.id);
}

async function getArticleInfoFromIds(articleIds: number[]): Promise<Article[]> {
  const infoQueryParams: Params = {
    action: 'query',
    format: 'json',
    exintro: 'true',
    explaintext: 'true',
    inprop: 'url|displaytitle|preload',
    pageids: articleIds.join('|'),
    pithumbsize: '200',
    prop: 'extracts|pageimages|info',
    redirects: '1',
  };
  const params = new URLSearchParams(infoQueryParams).toString();
  const url = 'https://en.wikipedia.org/w/api.php?origin=*&' + params;
  const articleData = await fetch(url).then((res) => res.json());

  return articleData.query.pages;
}

export async function getServerSideProps() {
  const randomArticleIds = await getRandomArticleIds();
  const randomArticleInfo = await getArticleInfoFromIds(randomArticleIds);

  return {
    props: { articles: randomArticleInfo },
  };
}

type HomeProps = {
  articles: Article[];
};

export default function Home({ articles }: HomeProps) {
  console.log('articles', articles);
  return (
    <>
      <Head>
        <title>Wikipedia Infinite Scroll</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>Hi</div>
    </>
  );
}
